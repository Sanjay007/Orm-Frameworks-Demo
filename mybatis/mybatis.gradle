buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath gradleApi()
        classpath('org.mybatis.generator:mybatis-generator-core:1.3.3')
    }
}

import org.mybatis.generator.api.MyBatisGenerator
import org.mybatis.generator.config.Configuration
import org.mybatis.generator.config.Context
import org.mybatis.generator.config.JDBCConnectionConfiguration
import org.mybatis.generator.config.xml.ConfigurationParser
import org.mybatis.generator.internal.DefaultShellCallback

import java.io.File
import java.util.ArrayList
import java.util.List
import java.nio.file.Files
import java.nio.file.Paths

task(generateDomainObjects) << {
    ensureTargetDirectoryExists()

    List<String> warnings = new ArrayList<>()
    Configuration configuration = loadMyBatisConfiguration(warnings)

    DefaultShellCallback callback = new DefaultShellCallback(true)
    MyBatisGenerator myBatisGenerator = new MyBatisGenerator(configuration, callback, warnings)
    myBatisGenerator.generate(null)

    warnings.each { warning -> logger.warn(warning) }
}

void ensureTargetDirectoryExists() {
    Files.createDirectories(Paths.get("src/generated/java"))
}

Configuration loadMyBatisConfiguration(List<String> warnings) {
    File configurationFile = findFileInProjectResources('mybatis-generator-configuration.xml')
    ConfigurationParser cp = new ConfigurationParser(warnings)
    return cp.parseConfiguration(configurationFile)
}

File findFileInProjectResources(String fileName) {
    for (Project project : allprojects) {
        for (String resourcesDir : project.sourceSets.main.resources.srcDirs) {
            File file = new File(resourcesDir, fileName)
            if (file.exists()) {
                return file
            }
        }
    }
    throw new IllegalArgumentException("File " + fileName + " not found!")
}
